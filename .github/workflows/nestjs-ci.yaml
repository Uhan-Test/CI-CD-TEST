name: Nestjs CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x] #18.x,

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x] #18.x,
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
      - name: Run tests
        run: npm test

  deploy:
    needs: test
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          aws-region: ap-northeast-2
          role-to-assume: arn:aws:iam::730335305602:role/OIDC # arn:aws:iam::730335305602:oidc-provider/token.actions.githubusercontent.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cicdtest
          IMAGE_TAG: ${{ github.sha }}
        run: | 
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker-compose build
          docker tag mongo:latest $ECR_REGISTRY/cicdtest:$IMAGE_TAG
          docker tag mariadb:latest $ECR_REGISTRY/cicdtest:$IMAGE_TAG
          docker tag redis:latest $ECR_REGISTRY/cicdtest:$IMAGE_TAG
          docker-compose push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        #   sudo usermod -aG docker $USER
        #   newgrp docker
        #   aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
        #   docker-compose -f docker-compose.yaml build $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        #   docker-compose tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/cicdtest:$IMAGE_TAG
        #   docker-compose -f docker-compose.yaml push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        #   echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
        # docker-compose build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker-compose push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
